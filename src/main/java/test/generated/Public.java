/*
 * This file is generated by jOOQ.
*/
package test.generated;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Catalog;
import org.jooq.Sequence;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;

import test.generated.tables.AllDistr;
import test.generated.tables.Appderigistration;
import test.generated.tables.Appregistration;
import test.generated.tables.Assignment;
import test.generated.tables.BadsView;
import test.generated.tables.Category;
import test.generated.tables.CurrentDistrView;
import test.generated.tables.Distrorder;
import test.generated.tables.Drcateg;
import test.generated.tables.DriverLicenseView;
import test.generated.tables.Driverlicense;
import test.generated.tables.Employe;
import test.generated.tables.EmployeView;
import test.generated.tables.Enginetype;
import test.generated.tables.ExamView;
import test.generated.tables.Examcateg;
import test.generated.tables.Examlist;
import test.generated.tables.LicensePlateView;
import test.generated.tables.Licenseplate;
import test.generated.tables.Person;
import test.generated.tables.Plate;
import test.generated.tables.Position;
import test.generated.tables.Postdps;
import test.generated.tables.Protocol;
import test.generated.tables.ProtocolView;
import test.generated.tables.Protocoldecision;
import test.generated.tables.Protocoltype;
import test.generated.tables.Pts;
import test.generated.tables.RegCertView;
import test.generated.tables.Regcert;
import test.generated.tables.Region;
import test.generated.tables.Typedecision;
import test.generated.tables.Typev;
import test.generated.tables.Vehicle;
import test.generated.tables.VehicleView;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Public extends SchemaImpl {

    private static final long serialVersionUID = -1513811671;

    /**
     * The reference instance of <code>public</code>
     */
    public static final Public PUBLIC = new Public();

    /**
     * The table <code>public.AppDerigistration</code>.
     */
    public final Appderigistration APPDERIGISTRATION = test.generated.tables.Appderigistration.APPDERIGISTRATION;

    /**
     * The table <code>public.AppRegistration</code>.
     */
    public final Appregistration APPREGISTRATION = test.generated.tables.Appregistration.APPREGISTRATION;

    /**
     * The table <code>public.Assignment</code>.
     */
    public final Assignment ASSIGNMENT = test.generated.tables.Assignment.ASSIGNMENT;

    /**
     * The table <code>public.Category</code>.
     */
    public final Category CATEGORY = test.generated.tables.Category.CATEGORY;

    /**
     * The table <code>public.DistrOrder</code>.
     */
    public final Distrorder DISTRORDER = test.generated.tables.Distrorder.DISTRORDER;

    /**
     * The table <code>public.DrCateg</code>.
     */
    public final Drcateg DRCATEG = test.generated.tables.Drcateg.DRCATEG;

    /**
     * The table <code>public.DriverLicense</code>.
     */
    public final Driverlicense DRIVERLICENSE = test.generated.tables.Driverlicense.DRIVERLICENSE;

    /**
     * The table <code>public.Employe</code>.
     */
    public final Employe EMPLOYE = test.generated.tables.Employe.EMPLOYE;

    /**
     * The table <code>public.EngineType</code>.
     */
    public final Enginetype ENGINETYPE = test.generated.tables.Enginetype.ENGINETYPE;

    /**
     * The table <code>public.ExamCateg</code>.
     */
    public final Examcateg EXAMCATEG = test.generated.tables.Examcateg.EXAMCATEG;

    /**
     * The table <code>public.ExamList</code>.
     */
    public final Examlist EXAMLIST = test.generated.tables.Examlist.EXAMLIST;

    /**
     * The table <code>public.LicensePlate</code>.
     */
    public final Licenseplate LICENSEPLATE = test.generated.tables.Licenseplate.LICENSEPLATE;

    /**
     * The table <code>public.PTS</code>.
     */
    public final Pts PTS = test.generated.tables.Pts.PTS;

    /**
     * The table <code>public.Person</code>.
     */
    public final Person PERSON = test.generated.tables.Person.PERSON;

    /**
     * The table <code>public.Plate</code>.
     */
    public final Plate PLATE = test.generated.tables.Plate.PLATE;

    /**
     * The table <code>public.Position</code>.
     */
    public final Position POSITION = test.generated.tables.Position.POSITION;

    /**
     * The table <code>public.PostDPS</code>.
     */
    public final Postdps POSTDPS = test.generated.tables.Postdps.POSTDPS;

    /**
     * The table <code>public.Protocol</code>.
     */
    public final Protocol PROTOCOL = test.generated.tables.Protocol.PROTOCOL;

    /**
     * The table <code>public.ProtocolDecision</code>.
     */
    public final Protocoldecision PROTOCOLDECISION = test.generated.tables.Protocoldecision.PROTOCOLDECISION;

    /**
     * The table <code>public.ProtocolType</code>.
     */
    public final Protocoltype PROTOCOLTYPE = test.generated.tables.Protocoltype.PROTOCOLTYPE;

    /**
     * The table <code>public.RegCert</code>.
     */
    public final Regcert REGCERT = test.generated.tables.Regcert.REGCERT;

    /**
     * The table <code>public.Region</code>.
     */
    public final Region REGION = test.generated.tables.Region.REGION;

    /**
     * The table <code>public.TypeDecision</code>.
     */
    public final Typedecision TYPEDECISION = test.generated.tables.Typedecision.TYPEDECISION;

    /**
     * The table <code>public.TypeV</code>.
     */
    public final Typev TYPEV = test.generated.tables.Typev.TYPEV;

    /**
     * The table <code>public.Vehicle</code>.
     */
    public final Vehicle VEHICLE = test.generated.tables.Vehicle.VEHICLE;

    /**
     * The table <code>public.all_distr</code>.
     */
    public final AllDistr ALL_DISTR = test.generated.tables.AllDistr.ALL_DISTR;

    /**
     * The table <code>public.bads_view</code>.
     */
    public final BadsView BADS_VIEW = test.generated.tables.BadsView.BADS_VIEW;

    /**
     * The table <code>public.current_distr_view</code>.
     */
    public final CurrentDistrView CURRENT_DISTR_VIEW = test.generated.tables.CurrentDistrView.CURRENT_DISTR_VIEW;

    /**
     * The table <code>public.driver_license_view</code>.
     */
    public final DriverLicenseView DRIVER_LICENSE_VIEW = test.generated.tables.DriverLicenseView.DRIVER_LICENSE_VIEW;

    /**
     * The table <code>public.employe_view</code>.
     */
    public final EmployeView EMPLOYE_VIEW = test.generated.tables.EmployeView.EMPLOYE_VIEW;

    /**
     * The table <code>public.exam_view</code>.
     */
    public final ExamView EXAM_VIEW = test.generated.tables.ExamView.EXAM_VIEW;

    /**
     * The table <code>public.license_plate_view</code>.
     */
    public final LicensePlateView LICENSE_PLATE_VIEW = test.generated.tables.LicensePlateView.LICENSE_PLATE_VIEW;

    /**
     * The table <code>public.protocol_view</code>.
     */
    public final ProtocolView PROTOCOL_VIEW = test.generated.tables.ProtocolView.PROTOCOL_VIEW;

    /**
     * The table <code>public.reg_cert_view</code>.
     */
    public final RegCertView REG_CERT_VIEW = test.generated.tables.RegCertView.REG_CERT_VIEW;

    /**
     * The table <code>public.vehicle_view</code>.
     */
    public final VehicleView VEHICLE_VIEW = test.generated.tables.VehicleView.VEHICLE_VIEW;

    /**
     * No further instances allowed
     */
    private Public() {
        super("public", null);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Sequence<?>> getSequences() {
        List result = new ArrayList();
        result.addAll(getSequences0());
        return result;
    }

    private final List<Sequence<?>> getSequences0() {
        return Arrays.<Sequence<?>>asList(
            Sequences.APPDERIGISTRATION_APPDERIGISTRATION_PK_SEQ,
            Sequences.APPREGISTRATION_APPREGISTRATION_PK_SEQ,
            Sequences.ASSIGNMENT_ASSIGNMENT_PK_SEQ,
            Sequences.CATEGORY_CATEGORY_PK_SEQ,
            Sequences.DISTRORDER_DISTRORDER_PK_SEQ,
            Sequences.DRCATEG_DRCATEG_PK_SEQ,
            Sequences.DRIVERLICENSE_DRIVERLICENSE_PK_SEQ,
            Sequences.EMPLOYE_EMPLOYE_PK_SEQ,
            Sequences.ENGINETYPE_ENGINETYPE_PK_SEQ,
            Sequences.EXAMCATEG_EXAMCATEG_PK_SEQ,
            Sequences.EXAMLIST_EXAMLIST_PK_SEQ,
            Sequences.LICENSEPLATE_LICENSEPLATE_PK_SEQ,
            Sequences.PERSON_PERSON_PK_SEQ,
            Sequences.PLATE_PLATE_PK_SEQ,
            Sequences.POSITION_POSITION_PK_SEQ,
            Sequences.POSTDPS_POSTDPS_PK_SEQ,
            Sequences.PROTOCOLDECISION_PROTOCOLDECISION_PK_SEQ,
            Sequences.PROTOCOL_PROTOCOL_PK_SEQ,
            Sequences.PROTOCOLTYPE_PROTOCOLTYPE_PK_SEQ,
            Sequences.PTS_PTS_PK_SEQ,
            Sequences.REGCERT_REGCERT_PK_SEQ,
            Sequences.REGION_REGION_PK_SEQ,
            Sequences.TYPEDECISION_TYPEDECISION_PK_SEQ,
            Sequences.TYPEV_TYPEV_PK_SEQ,
            Sequences.VEHICLE_VEHICLE_PK_SEQ);
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
            Appderigistration.APPDERIGISTRATION,
            Appregistration.APPREGISTRATION,
            Assignment.ASSIGNMENT,
            Category.CATEGORY,
            Distrorder.DISTRORDER,
            Drcateg.DRCATEG,
            Driverlicense.DRIVERLICENSE,
            Employe.EMPLOYE,
            Enginetype.ENGINETYPE,
            Examcateg.EXAMCATEG,
            Examlist.EXAMLIST,
            Licenseplate.LICENSEPLATE,
            Pts.PTS,
            Person.PERSON,
            Plate.PLATE,
            Position.POSITION,
            Postdps.POSTDPS,
            Protocol.PROTOCOL,
            Protocoldecision.PROTOCOLDECISION,
            Protocoltype.PROTOCOLTYPE,
            Regcert.REGCERT,
            Region.REGION,
            Typedecision.TYPEDECISION,
            Typev.TYPEV,
            Vehicle.VEHICLE,
            AllDistr.ALL_DISTR,
            BadsView.BADS_VIEW,
            CurrentDistrView.CURRENT_DISTR_VIEW,
            DriverLicenseView.DRIVER_LICENSE_VIEW,
            EmployeView.EMPLOYE_VIEW,
            ExamView.EXAM_VIEW,
            LicensePlateView.LICENSE_PLATE_VIEW,
            ProtocolView.PROTOCOL_VIEW,
            RegCertView.REG_CERT_VIEW,
            VehicleView.VEHICLE_VIEW);
    }
}
