/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Public;
import test.generated.tables.records.ExamcategRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Examcateg extends TableImpl<ExamcategRecord> {

    private static final long serialVersionUID = 1266106984;

    /**
     * The reference instance of <code>public.ExamCateg</code>
     */
    public static final Examcateg EXAMCATEG = new Examcateg();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExamcategRecord> getRecordType() {
        return ExamcategRecord.class;
    }

    /**
     * The column <code>public.ExamCateg.ExamCateg_PK</code>.
     */
    public final TableField<ExamcategRecord, Long> EXAMCATEG_PK = createField("ExamCateg_PK", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"ExamCateg_ExamCateg_PK_seq\"'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.ExamCateg.Category_PK</code>.
     */
    public final TableField<ExamcategRecord, Long> CATEGORY_PK = createField("Category_PK", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ExamCateg.ExamList_PK</code>.
     */
    public final TableField<ExamcategRecord, Long> EXAMLIST_PK = createField("ExamList_PK", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.ExamCateg</code> table reference
     */
    public Examcateg() {
        this(DSL.name("ExamCateg"), null);
    }

    /**
     * Create an aliased <code>public.ExamCateg</code> table reference
     */
    public Examcateg(String alias) {
        this(DSL.name(alias), EXAMCATEG);
    }

    /**
     * Create an aliased <code>public.ExamCateg</code> table reference
     */
    public Examcateg(Name alias) {
        this(alias, EXAMCATEG);
    }

    private Examcateg(Name alias, Table<ExamcategRecord> aliased) {
        this(alias, aliased, null);
    }

    private Examcateg(Name alias, Table<ExamcategRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ExamcategRecord, Long> getIdentity() {
        return Keys.IDENTITY_EXAMCATEG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExamcategRecord> getPrimaryKey() {
        return Keys.EXAMCATEG_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExamcategRecord>> getKeys() {
        return Arrays.<UniqueKey<ExamcategRecord>>asList(Keys.EXAMCATEG_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ExamcategRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ExamcategRecord, ?>>asList(Keys.EXAMCATEG__RELATIONSHIP47, Keys.EXAMCATEG__RELATIONSHIP48);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Examcateg as(String alias) {
        return new Examcateg(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Examcateg as(Name alias) {
        return new Examcateg(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Examcateg rename(String name) {
        return new Examcateg(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Examcateg rename(Name name) {
        return new Examcateg(name, null);
    }
}
