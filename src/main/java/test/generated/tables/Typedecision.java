/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Public;
import test.generated.tables.records.TypedecisionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Typedecision extends TableImpl<TypedecisionRecord> {

    private static final long serialVersionUID = 723713353;

    /**
     * The reference instance of <code>public.TypeDecision</code>
     */
    public static final Typedecision TYPEDECISION = new Typedecision();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypedecisionRecord> getRecordType() {
        return TypedecisionRecord.class;
    }

    /**
     * The column <code>public.TypeDecision.Name</code>.
     */
    public final TableField<TypedecisionRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.TypeDecision.TypeDecision_PK</code>.
     */
    public final TableField<TypedecisionRecord, Long> TYPEDECISION_PK = createField("TypeDecision_PK", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"TypeDecision_TypeDecision_PK_seq\"'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>public.TypeDecision</code> table reference
     */
    public Typedecision() {
        this(DSL.name("TypeDecision"), null);
    }

    /**
     * Create an aliased <code>public.TypeDecision</code> table reference
     */
    public Typedecision(String alias) {
        this(DSL.name(alias), TYPEDECISION);
    }

    /**
     * Create an aliased <code>public.TypeDecision</code> table reference
     */
    public Typedecision(Name alias) {
        this(alias, TYPEDECISION);
    }

    private Typedecision(Name alias, Table<TypedecisionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Typedecision(Name alias, Table<TypedecisionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TypedecisionRecord, Long> getIdentity() {
        return Keys.IDENTITY_TYPEDECISION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TypedecisionRecord> getPrimaryKey() {
        return Keys.PK_TYPEDECISION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TypedecisionRecord>> getKeys() {
        return Arrays.<UniqueKey<TypedecisionRecord>>asList(Keys.PK_TYPEDECISION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Typedecision as(String alias) {
        return new Typedecision(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Typedecision as(Name alias) {
        return new Typedecision(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Typedecision rename(String name) {
        return new Typedecision(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Typedecision rename(Name name) {
        return new Typedecision(name, null);
    }
}
