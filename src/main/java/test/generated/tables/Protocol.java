/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Public;
import test.generated.tables.records.ProtocolRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Protocol extends TableImpl<ProtocolRecord> {

    private static final long serialVersionUID = 591165329;

    /**
     * The reference instance of <code>public.Protocol</code>
     */
    public static final Protocol PROTOCOL = new Protocol();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProtocolRecord> getRecordType() {
        return ProtocolRecord.class;
    }

    /**
     * The column <code>public.Protocol.ArticleCop</code>.
     */
    public final TableField<ProtocolRecord, String> ARTICLECOP = createField("ArticleCop", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Protocol.AddressVioalation</code>.
     */
    public final TableField<ProtocolRecord, String> ADDRESSVIOALATION = createField("AddressVioalation", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.Protocol.Person_PK</code>.
     */
    public final TableField<ProtocolRecord, Long> PERSON_PK = createField("Person_PK", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.Protocol.Protocol_PK</code>.
     */
    public final TableField<ProtocolRecord, Long> PROTOCOL_PK = createField("Protocol_PK", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"Protocol_Protocol_PK_seq\"'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.Protocol.Employe_PK</code>.
     */
    public final TableField<ProtocolRecord, Long> EMPLOYE_PK = createField("Employe_PK", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.Protocol.Person_PK1</code>.
     */
    public final TableField<ProtocolRecord, Long> PERSON_PK1 = createField("Person_PK1", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.Protocol.Date</code>.
     */
    public final TableField<ProtocolRecord, Date> DATE = createField("Date", org.jooq.impl.SQLDataType.DATE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>public.Protocol.More</code>.
     */
    public final TableField<ProtocolRecord, String> MORE = createField("More", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.Protocol.ProtocolType_PK</code>.
     */
    public final TableField<ProtocolRecord, Long> PROTOCOLTYPE_PK = createField("ProtocolType_PK", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.Protocol</code> table reference
     */
    public Protocol() {
        this(DSL.name("Protocol"), null);
    }

    /**
     * Create an aliased <code>public.Protocol</code> table reference
     */
    public Protocol(String alias) {
        this(DSL.name(alias), PROTOCOL);
    }

    /**
     * Create an aliased <code>public.Protocol</code> table reference
     */
    public Protocol(Name alias) {
        this(alias, PROTOCOL);
    }

    private Protocol(Name alias, Table<ProtocolRecord> aliased) {
        this(alias, aliased, null);
    }

    private Protocol(Name alias, Table<ProtocolRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProtocolRecord, Long> getIdentity() {
        return Keys.IDENTITY_PROTOCOL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProtocolRecord> getPrimaryKey() {
        return Keys.PK_PROTOCOL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProtocolRecord>> getKeys() {
        return Arrays.<UniqueKey<ProtocolRecord>>asList(Keys.PK_PROTOCOL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProtocolRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProtocolRecord, ?>>asList(Keys.PROTOCOL__RELATIONSHIP13, Keys.PROTOCOL__RELATIONSHIP34);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Protocol as(String alias) {
        return new Protocol(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Protocol as(Name alias) {
        return new Protocol(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Protocol rename(String name) {
        return new Protocol(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Protocol rename(Name name) {
        return new Protocol(name, null);
    }
}
