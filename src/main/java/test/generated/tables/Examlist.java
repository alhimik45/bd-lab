/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Public;
import test.generated.tables.records.ExamlistRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Examlist extends TableImpl<ExamlistRecord> {

    private static final long serialVersionUID = 553544760;

    /**
     * The reference instance of <code>public.ExamList</code>
     */
    public static final Examlist EXAMLIST = new Examlist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExamlistRecord> getRecordType() {
        return ExamlistRecord.class;
    }

    /**
     * The column <code>public.ExamList.Results</code>.
     */
    public final TableField<ExamlistRecord, String> RESULTS = createField("Results", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.ExamList.Person_PK</code>.
     */
    public final TableField<ExamlistRecord, Long> PERSON_PK = createField("Person_PK", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ExamList.ExamList_PK</code>.
     */
    public final TableField<ExamlistRecord, Long> EXAMLIST_PK = createField("ExamList_PK", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"ExamList_ExamList_PK_seq\"'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.ExamList.Employe_PK</code>.
     */
    public final TableField<ExamlistRecord, Long> EMPLOYE_PK = createField("Employe_PK", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.ExamList.Person_PK1</code>.
     */
    public final TableField<ExamlistRecord, Long> PERSON_PK1 = createField("Person_PK1", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.ExamList.Date</code>.
     */
    public final TableField<ExamlistRecord, Date> DATE = createField("Date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * Create a <code>public.ExamList</code> table reference
     */
    public Examlist() {
        this(DSL.name("ExamList"), null);
    }

    /**
     * Create an aliased <code>public.ExamList</code> table reference
     */
    public Examlist(String alias) {
        this(DSL.name(alias), EXAMLIST);
    }

    /**
     * Create an aliased <code>public.ExamList</code> table reference
     */
    public Examlist(Name alias) {
        this(alias, EXAMLIST);
    }

    private Examlist(Name alias, Table<ExamlistRecord> aliased) {
        this(alias, aliased, null);
    }

    private Examlist(Name alias, Table<ExamlistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ExamlistRecord, Long> getIdentity() {
        return Keys.IDENTITY_EXAMLIST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExamlistRecord> getPrimaryKey() {
        return Keys.PK_EXAMLIST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExamlistRecord>> getKeys() {
        return Arrays.<UniqueKey<ExamlistRecord>>asList(Keys.PK_EXAMLIST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ExamlistRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ExamlistRecord, ?>>asList(Keys.EXAMLIST__RELATIONSHIP18, Keys.EXAMLIST__RELATIONSHIP41);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Examlist as(String alias) {
        return new Examlist(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Examlist as(Name alias) {
        return new Examlist(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Examlist rename(String name) {
        return new Examlist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Examlist rename(Name name) {
        return new Examlist(name, null);
    }
}
