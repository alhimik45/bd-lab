/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Public;
import test.generated.tables.records.RegcertRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Regcert extends TableImpl<RegcertRecord> {

    private static final long serialVersionUID = 1820585153;

    /**
     * The reference instance of <code>public.RegCert</code>
     */
    public static final Regcert REGCERT = new Regcert();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegcertRecord> getRecordType() {
        return RegcertRecord.class;
    }

    /**
     * The column <code>public.RegCert.Content</code>.
     */
    public final TableField<RegcertRecord, String> CONTENT = createField("Content", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.RegCert.Person_PK</code>.
     */
    public final TableField<RegcertRecord, Long> PERSON_PK = createField("Person_PK", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.RegCert.Vehicle_PK</code>.
     */
    public final TableField<RegcertRecord, Long> VEHICLE_PK = createField("Vehicle_PK", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.RegCert.RegCert_PK</code>.
     */
    public final TableField<RegcertRecord, Long> REGCERT_PK = createField("RegCert_PK", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"RegCert_RegCert_PK_seq\"'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.RegCert.Employe_PK</code>.
     */
    public final TableField<RegcertRecord, Long> EMPLOYE_PK = createField("Employe_PK", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.RegCert.Person_PK1</code>.
     */
    public final TableField<RegcertRecord, Long> PERSON_PK1 = createField("Person_PK1", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.RegCert.Date</code>.
     */
    public final TableField<RegcertRecord, Date> DATE = createField("Date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>public.RegCert.EndDate</code>.
     */
    public final TableField<RegcertRecord, Date> ENDDATE = createField("EndDate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * Create a <code>public.RegCert</code> table reference
     */
    public Regcert() {
        this(DSL.name("RegCert"), null);
    }

    /**
     * Create an aliased <code>public.RegCert</code> table reference
     */
    public Regcert(String alias) {
        this(DSL.name(alias), REGCERT);
    }

    /**
     * Create an aliased <code>public.RegCert</code> table reference
     */
    public Regcert(Name alias) {
        this(alias, REGCERT);
    }

    private Regcert(Name alias, Table<RegcertRecord> aliased) {
        this(alias, aliased, null);
    }

    private Regcert(Name alias, Table<RegcertRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RegcertRecord, Long> getIdentity() {
        return Keys.IDENTITY_REGCERT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RegcertRecord> getPrimaryKey() {
        return Keys.PK_REGCERT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RegcertRecord>> getKeys() {
        return Arrays.<UniqueKey<RegcertRecord>>asList(Keys.PK_REGCERT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RegcertRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RegcertRecord, ?>>asList(Keys.REGCERT__RELATIONSHIP19, Keys.REGCERT__RELATIONSHIP37, Keys.REGCERT__RELATIONSHIP21);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Regcert as(String alias) {
        return new Regcert(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Regcert as(Name alias) {
        return new Regcert(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Regcert rename(String name) {
        return new Regcert(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Regcert rename(Name name) {
        return new Regcert(name, null);
    }
}
