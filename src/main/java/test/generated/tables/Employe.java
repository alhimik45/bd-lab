/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Public;
import test.generated.tables.records.EmployeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employe extends TableImpl<EmployeRecord> {

    private static final long serialVersionUID = 1810935891;

    /**
     * The reference instance of <code>public.Employe</code>
     */
    public static final Employe EMPLOYE = new Employe();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeRecord> getRecordType() {
        return EmployeRecord.class;
    }

    /**
     * The column <code>public.Employe.PersonalID</code>.
     */
    public final TableField<EmployeRecord, String> PERSONALID = createField("PersonalID", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Employe.Employe_PK</code>.
     */
    public final TableField<EmployeRecord, Long> EMPLOYE_PK = createField("Employe_PK", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"Employe_Employe_PK_seq\"'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.Employe.Person_PK</code>.
     */
    public final TableField<EmployeRecord, Long> PERSON_PK = createField("Person_PK", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.Employe.Position_PK</code>.
     */
    public final TableField<EmployeRecord, Long> POSITION_PK = createField("Position_PK", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.Employe.Login</code>.
     */
    public final TableField<EmployeRecord, String> LOGIN = createField("Login", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.Employe.Password</code>.
     */
    public final TableField<EmployeRecord, String> PASSWORD = createField("Password", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * Create a <code>public.Employe</code> table reference
     */
    public Employe() {
        this(DSL.name("Employe"), null);
    }

    /**
     * Create an aliased <code>public.Employe</code> table reference
     */
    public Employe(String alias) {
        this(DSL.name(alias), EMPLOYE);
    }

    /**
     * Create an aliased <code>public.Employe</code> table reference
     */
    public Employe(Name alias) {
        this(alias, EMPLOYE);
    }

    private Employe(Name alias, Table<EmployeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employe(Name alias, Table<EmployeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EmployeRecord, Long> getIdentity() {
        return Keys.IDENTITY_EMPLOYE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EmployeRecord> getPrimaryKey() {
        return Keys.PK_EMPLOYE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EmployeRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeRecord>>asList(Keys.PK_EMPLOYE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EmployeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployeRecord, ?>>asList(Keys.EMPLOYE__RELATIONSHIP1, Keys.EMPLOYE__RELATIONSHIP43);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Employe as(String alias) {
        return new Employe(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Employe as(Name alias) {
        return new Employe(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employe rename(String name) {
        return new Employe(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employe rename(Name name) {
        return new Employe(name, null);
    }
}
