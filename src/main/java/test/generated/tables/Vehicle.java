/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Public;
import test.generated.tables.records.VehicleRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Vehicle extends TableImpl<VehicleRecord> {

    private static final long serialVersionUID = 1890056305;

    /**
     * The reference instance of <code>public.Vehicle</code>
     */
    public static final Vehicle VEHICLE = new Vehicle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VehicleRecord> getRecordType() {
        return VehicleRecord.class;
    }

    /**
     * The column <code>public.Vehicle.Vehicle_PK</code>.
     */
    public final TableField<VehicleRecord, Long> VEHICLE_PK = createField("Vehicle_PK", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"Vehicle_Vehicle_PK_seq\"'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>public.Vehicle</code> table reference
     */
    public Vehicle() {
        this(DSL.name("Vehicle"), null);
    }

    /**
     * Create an aliased <code>public.Vehicle</code> table reference
     */
    public Vehicle(String alias) {
        this(DSL.name(alias), VEHICLE);
    }

    /**
     * Create an aliased <code>public.Vehicle</code> table reference
     */
    public Vehicle(Name alias) {
        this(alias, VEHICLE);
    }

    private Vehicle(Name alias, Table<VehicleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Vehicle(Name alias, Table<VehicleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<VehicleRecord, Long> getIdentity() {
        return Keys.IDENTITY_VEHICLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VehicleRecord> getPrimaryKey() {
        return Keys.PK_VEHICLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VehicleRecord>> getKeys() {
        return Arrays.<UniqueKey<VehicleRecord>>asList(Keys.PK_VEHICLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Vehicle as(String alias) {
        return new Vehicle(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Vehicle as(Name alias) {
        return new Vehicle(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicle rename(String name) {
        return new Vehicle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicle rename(Name name) {
        return new Vehicle(name, null);
    }
}
