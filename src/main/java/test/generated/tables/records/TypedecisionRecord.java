/*
 * This file is generated by jOOQ.
*/
package test.generated.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import test.generated.tables.Typedecision;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypedecisionRecord extends UpdatableRecordImpl<TypedecisionRecord> implements Record2<String, Long> {

    private static final long serialVersionUID = -365214076;

    /**
     * Setter for <code>public.TypeDecision.Name</code>.
     */
    public void setName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.TypeDecision.Name</code>.
     */
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.TypeDecision.TypeDecision_PK</code>.
     */
    public void setTypedecisionPk(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.TypeDecision.TypeDecision_PK</code>.
     */
    public Long getTypedecisionPk() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Typedecision.TYPEDECISION.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field2() {
        return Typedecision.TYPEDECISION.TYPEDECISION_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component2() {
        return getTypedecisionPk();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value2() {
        return getTypedecisionPk();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypedecisionRecord value1(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypedecisionRecord value2(Long value) {
        setTypedecisionPk(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypedecisionRecord values(String value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TypedecisionRecord
     */
    public TypedecisionRecord() {
        super(Typedecision.TYPEDECISION);
    }

    /**
     * Create a detached, initialised TypedecisionRecord
     */
    public TypedecisionRecord(String name, Long typedecisionPk) {
        super(Typedecision.TYPEDECISION);

        set(0, name);
        set(1, typedecisionPk);
    }
}
