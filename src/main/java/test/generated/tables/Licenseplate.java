/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Public;
import test.generated.tables.records.LicenseplateRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Licenseplate extends TableImpl<LicenseplateRecord> {

    private static final long serialVersionUID = -129400334;

    /**
     * The reference instance of <code>public.LicensePlate</code>
     */
    public static final Licenseplate LICENSEPLATE = new Licenseplate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LicenseplateRecord> getRecordType() {
        return LicenseplateRecord.class;
    }

    /**
     * The column <code>public.LicensePlate.LicensePlate_PK</code>.
     */
    public final TableField<LicenseplateRecord, Long> LICENSEPLATE_PK = createField("LicensePlate_PK", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"LicensePlate_LicensePlate_PK_seq\"'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.LicensePlate.Region_PK</code>.
     */
    public final TableField<LicenseplateRecord, Long> REGION_PK = createField("Region_PK", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.LicensePlate.Plate_PK</code>.
     */
    public final TableField<LicenseplateRecord, Long> PLATE_PK = createField("Plate_PK", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.LicensePlate.Vehicle_PK</code>.
     */
    public final TableField<LicenseplateRecord, Long> VEHICLE_PK = createField("Vehicle_PK", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.LicensePlate</code> table reference
     */
    public Licenseplate() {
        this(DSL.name("LicensePlate"), null);
    }

    /**
     * Create an aliased <code>public.LicensePlate</code> table reference
     */
    public Licenseplate(String alias) {
        this(DSL.name(alias), LICENSEPLATE);
    }

    /**
     * Create an aliased <code>public.LicensePlate</code> table reference
     */
    public Licenseplate(Name alias) {
        this(alias, LICENSEPLATE);
    }

    private Licenseplate(Name alias, Table<LicenseplateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Licenseplate(Name alias, Table<LicenseplateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LicenseplateRecord, Long> getIdentity() {
        return Keys.IDENTITY_LICENSEPLATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LicenseplateRecord> getPrimaryKey() {
        return Keys.PK_LICENSEPLATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LicenseplateRecord>> getKeys() {
        return Arrays.<UniqueKey<LicenseplateRecord>>asList(Keys.PK_LICENSEPLATE, Keys.LICENSEPLATE_VEHICLE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<LicenseplateRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LicenseplateRecord, ?>>asList(Keys.LICENSEPLATE__RELATIONSHIP7, Keys.LICENSEPLATE__RELATIONSHIP33, Keys.LICENSEPLATE__LICENSEPLATE_VEHICLE_PK_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Licenseplate as(String alias) {
        return new Licenseplate(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Licenseplate as(Name alias) {
        return new Licenseplate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Licenseplate rename(String name) {
        return new Licenseplate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Licenseplate rename(Name name) {
        return new Licenseplate(name, null);
    }
}
